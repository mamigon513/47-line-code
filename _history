{"entries":[{"timestamp":1744216693090,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//  set variables\nlet lwheel = 10\nlet rwheel = 10\nlet error = 0\n//  which line are we following:\nlet line = -1\n//  0 is left, 1 is right\nlet maxturnspeed = 100\nmaxturnspeed = 50\n// magnet present\nlet mag = 0\n//  set starting speed\nCutebotPro.pwmCruiseControl(lwheel, rwheel)\nbasic.pause(50)\nfunction turn_right() {\n    \n    lwheel = lwheel + Math.abs(error) / 3000 * maxturnspeed\n    rwheel = rwheel - Math.abs(error) / 3000 * maxturnspeed\n    //  Set the change\n    CutebotPro.pwmCruiseControl(lwheel, rwheel)\n    // delay 0.05 sec\n    // delay 0.01 sec\n    basic.pause(10)\n}\n\nfunction turn_left() {\n    \n    lwheel = lwheel - Math.abs(error) / 3000 * maxturnspeed\n    rwheel = rwheel + Math.abs(error) / 3000 * maxturnspeed\n    //  Set the change\n    CutebotPro.pwmCruiseControl(lwheel, rwheel)\n    // delay 0.05 sec\n    // delay 0.01 sec\n    basic.pause(10)\n}\n\nfunction magnet() {\n    \n    if (Math.abs(input.magneticForce(Dimension.Y)) >= 500) {\n        mag = 1\n        //  turn headlights green\n        CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0x00ff00)\n    }\n    \n}\n\n// def on_forever():\nfunction follow_line() {\n    \n    //  get the line offset\n    error = CutebotPro.getOffset()\n    //  make the left side of line the center\n    error = error + 1000\n    //  if detects no line\n    if (Math.abs(error) == 3000) {\n        lwheel = 0\n        rwheel = 0\n        // turn on both headlight (red)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff0000)\n    }\n    \n    //  if detects a big line\n    // ### Intersection ####\n    //  if detects a big line (error is less than 100)\n    if (Math.abs(error) < 100) {\n        if (error > 0) {\n            //  robot is to the left of intersection (make a big right turn)\n            error = 3000 / error\n            turn_right()\n            basic.pause(100)\n            // yellow light\n            CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xffff00)\n        } else if (error < 0) {\n            //  robot is to the right of intersection (make a big left turn)\n            error = 3000 / error\n            turn_left()\n            basic.pause(100)\n            // yellow light\n            CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xffff00)\n        }\n        \n    }\n    \n    //  too far left\n    if (error > 0) {\n        turn_right()\n        line = 1\n        //  line is to the right\n        //  turn on left headlight (red)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff0000)\n    }\n    \n    //  too far right\n    if (error < 0) {\n        turn_left()\n        line = 0\n        //  line is to the left\n        // turn on right headlight (red)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff0000)\n    }\n    \n    //  reset speed and headlights\n    CutebotPro.turnOffAllHeadlights()\n    lwheel = 10\n    rwheel = 10\n    CutebotPro.pwmCruiseControl(lwheel, rwheel)\n    basic.pause(5)\n    magnet()\n}\n\n// basic.forever(on_forever)\n//  Run line follow till magnet detected then stop\nwhile (mag == 0) {\n    follow_line()\n}\n//  stop robot\nCutebotPro.pwmCruiseControl(0, 0)\nbasic.pause(100)\nCutebotPro.turnOffAllHeadlights()"],[0,"\n"]],"start1":0,"start2":0,"length1":3231,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\""],[0,"\n   "]],"start1":140,"start2":140,"length1":78,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":224,"start2":224,"length1":64,"length2":44}]},{"type":"added","filename":"main.py","value":"# set variables\nlwheel = 10\nrwheel = 10\nerror = 0\n# which line are we following:\nline = -1 # 0 is left, 1 is right\nmaxturnspeed = 100\nmaxturnspeed = 50\n \n#magnet present\nmag = 0\n \n # set starting speed\nCutebotPro.pwm_cruise_control(lwheel, rwheel)\nbasic.pause(50)\n \ndef turn_right():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel + (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel - (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\ndef turn_left():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel - (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel + (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\n     \ndef magnet():\n    global mag\n    if abs(input.magnetic_force(Dimension.Y)) >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n \n#def on_forever():\ndef follow_line():\n \n    global lwheel, rwheel, error, line\n \n     # get the line offset\n    error = CutebotPro.get_offset()\n \n     # make the left side of line the center\n    error = error + 1000\n \n     # if detects no line\n    if abs(error) == 3000:\n        lwheel = 0\n        rwheel = 0\n \n         #turn on both headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n     # if detects a big line\n     #### Intersection ####\n     # if detects a big line (error is less than 100)\n    if abs(error) < 100:\n        if error > 0: # robot is to the left of intersection (make a big right turn)\n            error = 3000/error\n            turn_right()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n        elif error < 0: # robot is to the right of intersection (make a big left turn)\n            error = 3000/error\n            turn_left()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n     # too far left\n    if error > 0:\n        turn_right()\n        line = 1 # line is to the right\n         # turn on left headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n     # too far right\n    if error < 0:\n        turn_left()\n        line = 0 # line is to the left\n         #turn on right headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n \n \n     # reset speed and headlights\n    CutebotPro.turn_off_all_headlights()\n    lwheel = 10\n    rwheel = 10\n \n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n    basic.pause(5)\n    magnet()\n \n \n #basic.forever(on_forever)\n # Run line follow till magnet detected then stop\nwhile (mag == 0):\n    follow_line()\n # stop robot\nCutebotPro.pwm_cruise_control(0, 0)\nbasic.pause(100)\nCutebotPro.turn_off_all_headlights()"}]},{"timestamp":1744216966528,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ion."],[-1,"X"],[1,"Y"],[0,")) >"]],"start1":932,"start2":932,"length1":9,"length2":9}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ion."],[-1,"X"],[1,"Y"],[0,")) >"]],"start1":934,"start2":934,"length1":9,"length2":9}]}]},{"timestamp":1744217364997,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ff00)\n \n"],[1,"#def on_forever():"],[0,"\ndef fol"]],"start1":1125,"start2":1125,"length1":16,"length2":34}]}]},{"timestamp":1744218264805,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n    \n}\n\n"],[1,"// def on_forever():\n"],[0,"function fol"]],"start1":1132,"start2":1132,"length1":24,"length2":45}]}]},{"timestamp":1744218264863,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"!w*S@a9s{i-x3GuhP1oy\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"*x:4`d}SJmhsWBSeZq*d\""],[0," x=\""]],"start1":151,"start2":151,"length1":34,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"et lwheel = "],[-1,"2"],[1,"1"],[0,"0\nlet rwheel"]],"start1":19,"start2":19,"length1":25,"length2":25},{"diffs":[[0,"l = "],[-1,"2"],[1,"1"],[0,"0\nle"]],"start1":43,"start2":43,"length1":9,"length2":9},{"diffs":[[0,"nspeed ="],[1," 100\nmaxturnspeed ="],[0," 50\n// m"]],"start1":147,"start2":147,"length1":16,"length2":35},{"diffs":[[0,"nter\n   "],[-1," //"],[0," error ="]],"start1":1278,"start2":1278,"length1":19,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":321,"start2":321,"length1":52,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"wheel = "],[-1,"2"],[1,"1"],[0,"0\nrwheel"]],"start1":17,"start2":17,"length1":17,"length2":17},{"diffs":[[0,"l = "],[-1,"2"],[1,"1"],[0,"0\ner"]],"start1":33,"start2":33,"length1":9,"length2":9},{"diffs":[[0,"d = "],[1,"100\nmaxturnspeed = "],[0,"50"],[-1,"\n"],[0,"\n \n#"]],"start1":126,"start2":126,"length1":11,"length2":29},{"diffs":[[0,"ter\n    "],[-1,"#"],[0,"error = "]],"start1":1302,"start2":1302,"length1":17,"length2":16}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1744216693089,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"4/7 line code\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1744218619487,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"# set variables\nlwheel = 20\nrwheel = 20\nerror = 0\n# which line are we following:\nline = -1 # 0 is left, 1 is right\nmaxturnspeed = 50\n\n \n#magnet present\nmag = 0\n \n # set starting speed\nCutebotPro.pwm_cruise_control(lwheel, rwheel)\nbasic.pause(50)\n \ndef turn_right():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel + (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel - (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\ndef turn_left():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel - (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel + (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\n     \ndef magnet():\n    global mag\n    if abs(input.magnetic_force(Dimension.X)) >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n \n\ndef follow_line():\n \n    global lwheel, rwheel, error, line\n \n     # get the line offset\n    error = CutebotPro.get_offset()\n \n     # make the left side of line the center\n    #error = error + 1000\n \n     # if detects no line\n    if abs(error) == 3000:\n        lwheel = 0\n        rwheel = 0\n \n         #turn on both headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n     # if detects a big line\n     #### Intersection ####\n     # if detects a big line (error is less than 100)\n    if abs(error) < 100:\n        if error > 0: # robot is to the left of intersection (make a big right turn)\n            error = 3000/error\n            turn_right()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n        elif error < 0: # robot is to the right of intersection (make a big left turn)\n            error = 3000/error\n            turn_left()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n     # too far left\n    if error > 0:\n        turn_right()\n        line = 1 # line is to the right\n         # turn on left headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n     # too far right\n    if error < 0:\n        turn_left()\n        line = 0 # line is to the left\n         #turn on right headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n \n \n     # reset speed and headlights\n    CutebotPro.turn_off_all_headlights()\n    lwheel = 10\n    rwheel = 10\n \n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n    basic.pause(5)\n    magnet()\n \n \n #basic.forever(on_forever)\n # Run line follow till magnet detected then stop\nwhile (mag == 0):\n    follow_line()\n # stop robot\nCutebotPro.pwm_cruise_control(0, 0)\nbasic.pause(100)\nCutebotPro.turn_off_all_headlights()","pxt.json":"{\n    \"name\": \"4/7 line code\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}}],"shares":[],"lastSaveTime":1744218619490}